CLIENT / SERVER methedologies:
-------------------------------
1) [FullStack Flow:]
   client and server are disconected
   Client (Native Android/WINFORM/React/Angular) ----> NODEJS/ASP.NET API
 - Client can be in any Platform technology
 - Usually server return JSON Data only
 - Client can get/send Json data
 - Client is responsible for creating its UI methodology based on the json data
 - SPA: Client is Single Page App
 - Client Server will comunicate using REST API:
   (GET/POST/PUT/DELETE/PETCH)
 - Browser client can use async java call: 
    FETCH / AXIOS / XHR
Flow Steps:
1) Client Request json data from server 
2) Server return Json Data
3) Client Get the JSON data and render ui dynamically on client CPU (Browser)
--------------------------
2) [Monolitic Flow:]
   server render html dynamically 
 - ASP.NET MVC / WEBFORMS / WEBPAGES
 - Server Send all HTML+JS+Css Dynamically and return it to client
 - PHP/MVC/NODEJS MVC
 - LESS JS
 - RETURN HTML + Data ready use by browser
 - good when no spa used
Flow steps:
1) client Request url from server 
2) Server will get client parameters and render HTML on server CPU dynamically
3) html with data send to client
4) client display full html as is from the server 
5) Ecommece ... developed as Monolitic
   PHP/WORDPRESS/ASP.NET
------------------------------
3) [Static Files Flow:]
- HTML + JS +CSS + images as files in server 
- get files from server as is
Landing Page 
--------------------------------------------------------------------------------------------------------

Client Rest Call:
----------------
 AXIOS:
 - Help to do rest comunication with server async
 - support HTTP Methods: GET/POST/DELETE/PUT/PETCH 
 - easy to use
 - very popular
 
 Install npm package:
    npm install axios
-----------------------------------------------------------------------


LIVE MOCK JSON SERVER 
---------------------
1)REQRES 
2)JSONPLACEHOLDER
3)localHost JSONServer
  - MOCK JSON NODEJS Server according json files
  - support all REST API 
  - update JSON FILE according Request
  - usuall call file db.json
  - run on different port then client
    localhost 5000 (SERVER) 
    localHost 3000 (Client)

How to use:(localhost nodejs server)
1) Create server folder
2) npm init 
3) npm install json-server
4) add db.json
5)
  "scripts": {
    "start": "json-server -p 5000 -w db.json"
  },
6)npm start

--------------------------------------------------------------------------------------------------------
Deploy Client APP:
 - npm run buid  
 - will create standard HTML+JS out of react src and components
 - (HTML+JS+CSS) are zipped (no human read)
 - can be integrated in any APP
 - Can be deploy to server:
   http://mydomain.com/index.html
 - when called the application(htm + js chuncks) will download to Client
 - react app will run using standard JS 
 --------------------------------------------------------------------------
 Deploy Client App using netlify :
 1) Build And Upload standard HTML/JS Menually
   - Build react: npm run build
   - build folder created
   - upload the build folder menually
 2) Get changes directly from github repo
 Help:
 https://www.makeuseof.com/how-to-deploy-react-app-with-github-pages/
----------------------------------------------------------------------------
Deploy  react client App to GitHubPages:
first Make the project sync with git hub remotely
1) npm install gh-pages
2)
"homepage": "https://<username>.github.io/<repository-name>/",        <-----
"scripts": {
 "predeploy": "npm run build",                        <------
 "deploy": "gh-pages -d build",                       <------
 "start": "react-scripts start",
 "build": "react-scripts build",
 "test": "react-scripts test",
 "eject": "react-scripts eject"
 }

 3) npm run deploy

//------------------------------------------------------------------------------
- CRUD using JSON SERVER 
- CRUD USING ASP.NET API
--------------------------------------------------------------------------------

